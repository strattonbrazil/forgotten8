using System;
using System.Collections.Generic;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;

namespace forgotten.Desktop
{
    public class BattlePane : Pane
    {
        AnimatedAsset alien;
        Texture2D battleship;
        Texture2D enemy;
        Vector2 shipPosW;
        Vector2 enemyPosW;
        const int NUM_STREAKS = 150;
        Streak[] streaks;

        public BattlePane()
        {
            battleship = Game().Content.Load<Texture2D>("spaceship_battle");
            enemy = Game().Content.Load<Texture2D>("enemyship_battle");
            streaks = new Streak[NUM_STREAKS];

            alien = AddChild("alien", new AnimatedAsset("autogenerated/alien_idle"));
            alien.Size = new Vector2(50, 80);
            alien.Position = new Vector2(200, 200);
        }

        public override void Draw(Vector2 targetSize)
        {
            float aspect = targetSize.X / (float)targetSize.Y;
            ScreenUtils su = new ScreenUtils(targetSize, new Vector2(aspect * 2, 2), 0);

            DrawColoredRect(new Vector2(0, 0),
                            targetSize,
                            Color.Black);

            foreach (Streak streak in streaks)
            {
                DrawColoredRect(su.WorldToScreen(streak.Position),
                                new Vector2(streak.Distance, streak.Thickness),
                                Color.White);
            }

            int desiredSize = 200;
            {
                float invScale = desiredSize / (float)battleship.Height;
                Vector2 scaledSize = new Vector2(invScale, invScale);
                Vector2 shipPos = su.WorldToScreen(shipPosW);
                Vector2 shipDrawSize = new Vector2(invScale * battleship.Width, invScale * battleship.Height);
                GameSpriteBatch().Draw(battleship,
                                       shipPos - 0.5f * shipDrawSize,
                                       null, // source rect
                                       Color.White,
                                       0,
                                       Vector2.Zero,
                                       invScale,
                                       SpriteEffects.None,
                                       0);
            }
            {
                float invScale = desiredSize / (float)enemy.Height;
                Vector2 scaledSize = new Vector2(invScale, invScale);
                Vector2 shipPos = su.WorldToScreen(enemyPosW);
                Vector2 shipDrawSize = new Vector2(invScale * enemy.Width, invScale * enemy.Height);
                GameSpriteBatch().Draw(enemy,
                                       shipPos - 0.5f * shipDrawSize,
                                       null, // source rect
                                       Color.White,
                                       0,
                                       Vector2.Zero,
                                       invScale,
                                       SpriteEffects.None,
                                       0);
            }
        }

        public override void Update(Vector2 targetSize, GameTime gameTime)
        {
            float aspect = targetSize.X / (float)targetSize.Y;
            ScreenUtils su = new ScreenUtils(targetSize, new Vector2(aspect * 2, 2), 0);

            MouseState ms = Mouse.GetState();
            MouseTracker().Update(ms);
            if (MouseTracker().WasPressed())
            {
                Console.WriteLine("fired!");
            }

            float elapsed = (float)gameTime.TotalGameTime.TotalSeconds;

            enemyPosW = new Vector2(0.1f * (float)Math.Sin(elapsed * 1.5f), -0.6f + 0.02f * (float)Math.Cos(elapsed * 0.5f));
            shipPosW = new Vector2(0.1f * (float)Math.Sin(elapsed), 0.6f + 0.02f * (float)Math.Cos(elapsed * 0.5f));

            for (int i = 0; i < NUM_STREAKS; i++)
            {
                float speed = 2 + (i % 4);
                float x = -aspect + (float)Math.Cos(i) + speed*elapsed; //20 + 50 * (float)Math.Cos(i);
                int screenWidths = (int)(x / (2 * aspect));
                x = x - screenWidths * (2 * aspect) - aspect;

                float y = 2 * ((i + 1.0f) / (NUM_STREAKS + 1)) - 1; //+ 30.0f * (float)Math.Sin(i);
                streaks[i].Position = new Vector2(x, y);
                streaks[i].Distance = targetSize.X * 0.002f * speed;
                streaks[i].Thickness = 1;
            }
        }

        struct Streak
        {
            public Vector2 Position;
            public float Distance;
            public float Thickness;
        }
    }
}
