using System;
using System.Collections.Generic;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;

namespace forgotten.Desktop
{
    public class EncounterPane : Pane
    {
        AnimatedAsset self;
        AnimatedAsset alien;
        TextAsset alienText;
        List<ButtonAsset> buttons = new List<ButtonAsset>();
        private int padding = 16;
        private DialogueStateMachine dialogueStateMachine;
        private DialogueState prevDialogState;
        private SoundEffect encounterSound;

        public EncounterPane(System system)
        {
            dialogueStateMachine = new DialogueStateMachine(new AlienEncounter());

            self = AddChild("self", new AnimatedAsset("autogenerated/self_bored"));
            alien = AddChild("alien", new AnimatedAsset("autogenerated/alien_idle"));
            alienText = AddChild("alienText", new TextAsset());

            encounterSound = Game().Content.Load<SoundEffect>("sounds/encounter");
            //encounterSound.Play();
        }

        public override void Draw(Vector2 targetSize)
        {
            DrawColoredRect(new Vector2(padding, padding),
                            new Vector2(targetSize.X - 2 * padding, self.TexHeight()),
                            Color.Red);

            DrawColoredRect(new Vector2(padding, targetSize.Y - padding - self.TexHeight()),
                            new Vector2(targetSize.X - 2 * padding, self.TexHeight()),
                            Color.CornflowerBlue);
        }

        public override void Update(Vector2 targetSize, GameTime gameTime)
        {
            alienText.Text = dialogueStateMachine.Text();
            alienText.Position = new Vector2(2 * padding, 2 * padding);
            alienText.MaxLineLength = (int)(targetSize.X - 4 * padding - alien.TexWidth());
            alien.Position = new Vector2(targetSize.X - 2 * padding - alien.TexWidth(), 2 * padding);

            self.Position = new Vector2(2*padding, targetSize.Y - self.TexHeight() - 2*padding);

            // remove all the previous buttons
            if (dialogueStateMachine.State() != prevDialogState)
            {
                children = children.FindAll(pair => !typeof(ButtonAsset).IsInstanceOfType(pair.Value));
                buttons.Clear();

                var buttonPos = new Vector2(3 * padding + self.TexWidth(), targetSize.Y - self.TexHeight());
                float buttonOffset = 0;
                int buttonIndex = 0;
                foreach (DialogueOption option in dialogueStateMachine.Options())
                {
                    int refIndex = buttonIndex;
                    Func<bool> onClick = delegate ()
                    {
                        dialogueStateMachine.SelectionOption(refIndex);
                        return true;
                    };
                    Func<bool, bool> onHover = delegate (bool hovered)
                    {
                        return true;
                    };

                    var buttonPrefix = (buttonIndex+1).ToString() + ") ";
                    var button = AddChild("dialogueOption", new ButtonAsset(buttonPrefix + option.Text, onClick, onHover));
                    buttons.Add(button);

                    button.Position = buttonPos + new Vector2(0, buttonOffset);
                    buttonOffset += button.Size.Y + padding;
                    buttonIndex++;
                }
                prevDialogState = dialogueStateMachine.State();
            }
        }
    }
}
