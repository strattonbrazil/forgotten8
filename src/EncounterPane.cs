using System;
using System.Collections.Generic;
using Microsoft.Xna.Framework;

namespace forgotten.Desktop
{
    public class EncounterPane : Pane
    {
        AnimatedAsset self;
        AnimatedAsset alien;
        TextAsset alienText;
        List<ButtonAsset> buttons = new List<ButtonAsset>();
        private int padding = 16;
        private DialogueState dialogueState;
        private DialogueState prevDialogState;

        public EncounterPane(System system)
        {
            dialogueState = new AlienEncounter();

            self = AddChild("self", new AnimatedAsset("autogenerated/self_bored"));
            alien = AddChild("alien", new AnimatedAsset("autogenerated/alien_idle"));
            alienText = AddChild("alienText", new TextAsset());
        }

        public override void Draw(Vector2 targetSize)
        {
            DrawColoredRect(new Vector2(padding, padding),
                            new Vector2(targetSize.X - 2 * padding, self.Height()),
                            Color.Red);

            DrawColoredRect(new Vector2(padding, targetSize.Y - padding - self.Height()),
                            new Vector2(targetSize.X - 2 * padding, self.Height()),
                            Color.CornflowerBlue);
        }

        public override void Update(Vector2 targetSize, GameTime gameTime)
        {
            alienText.Text = dialogueState.Text;
            alienText.Position = new Vector2(2 * padding, 2 * padding);
            alienText.MaxLineLength = (int)(targetSize.X - 4 * padding - alien.Width());
            alien.Position = new Vector2(targetSize.X - 2 * padding - alien.Width(), 2 * padding);

            self.Position = new Vector2(2*padding, targetSize.Y - self.Height() - 2*padding);

            // remove all the previous buttons
            if (dialogueState != prevDialogState)
            {
                children = children.FindAll(pair => !typeof(ButtonAsset).IsInstanceOfType(pair.Value));
                buttons.Clear();

                var buttonPos = new Vector2(3 * padding + self.Width(), targetSize.Y - self.Height());
                float buttonOffset = 0;
                int buttonIndex = 1;
                foreach (DialogueOption option in dialogueState.Options)
                {
                    Func<bool> onClick = delegate ()
                    {
                        return true;
                    };
                    Func<bool, bool> onHover = delegate (bool hovered)
                    {
                        return true;
                    };

                    var buttonPrefix = buttonIndex.ToString() + ") ";
                    var button = AddChild("dialogueOption", new ButtonAsset(buttonPrefix + option.Text, onClick, onHover));
                    buttons.Add(button);

                    button.Position = buttonPos + new Vector2(0, buttonOffset);
                    buttonOffset += button.Size.Y + padding;
                    buttonIndex++;
                }
                prevDialogState = dialogueState;
            }
        }
    }
}
