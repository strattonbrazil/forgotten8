using System;
using System.Collections.Generic;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;

namespace forgotten.Desktop
{
    public class TraderPane : Pane
    {
        private LayeredAsset trader;
        private List<LineItem> lines = new List<LineItem>();
        private TextAsset yourSide;
        private TextAsset theirSide;
        private TextAsset yourMoney;
        private TextAsset theirMoney;
        private SoundEffect tickSound;

        public TraderPane()
        {
            var label = new TextAsset("Trader");
            AddChild("traderLabel", label);

            trader = new LayeredAsset("autogenerated/trader");
            trader.Position = new Vector2(200, 100);
            AddChild("traderLayered", trader);

            yourSide = AddChild("yours", new TextAsset("Player"));
            theirSide = AddChild("yours", new TextAsset("Merchant"));

            yourMoney = AddChild("yours", new TextAsset("$1840"));
            theirMoney = AddChild("theres", new TextAsset("$15000"));

            lines.Add(new LineItem()
            {
                Label = makeText("Food"),
                Yours = makeText("3"),
                Less = makeButton("<", true, 0),
                More = makeButton(">", false, 0),
                Theirs = makeText("3"),
                Price = makeText("$80")
            });
            lines.Add(new LineItem()
            {
                Label = makeText("Goods"),
                Yours = makeText("3"),
                Less = makeButton("<", true, 1),
                More = makeButton(">", false, 1),
                Theirs = makeText("3"),
                Price = makeText("$70")
            });
            lines.Add(new LineItem()
            {
                Label = makeText("Sugar"),
                Yours = makeText("3"),
                Less = makeButton("<", true, 2),
                More = makeButton(">", false, 2),
                Theirs = makeText("3"),
                Price = makeText("$140")
            });
            lines.Add(new LineItem()
            {
                Label = makeText("Cannon"),
                Yours = makeText("3"),
                Less = makeButton("<", true, 3),
                More = makeButton(">", false, 3),
                Theirs = makeText("4"),
                Price = makeText("$50")
            });

            tickSound = Game().Content.Load<SoundEffect>("sounds/tick");
        }

        private TextAsset makeText(string s)
        {
            var asset = new TextAsset(s);
            return AddChild(s, asset);
        }

        private ButtonAsset makeButton(string s, bool less, int index)
        {
            Func<bool> onClick = delegate ()
            {
                int price = Int32.Parse(lines[index].Price.Text.Replace("$", ""));
                int playerMoney = Int32.Parse(yourMoney.Text.Replace("$", ""));
                int merchantMoney = Int32.Parse(theirMoney.Text.Replace("$", ""));

                int yours = Int32.Parse(lines[index].Yours.Text);
                int theirs = Int32.Parse(lines[index].Theirs.Text);

                if (less && theirs > 0 && price <= playerMoney)
                {
                    yours += 1;
                    theirs -= 1;
                    playerMoney -= price;
                    merchantMoney += price;
                    tickSound.Play();
                }
                else if (!less && yours > 0 && price <= merchantMoney)
                {
                    yours -= 1;
                    theirs += 1;
                    playerMoney += price;
                    merchantMoney += price;
                    tickSound.Play();
                }
                lines[index].Yours.Text = yours.ToString();
                lines[index].Theirs.Text = theirs.ToString();
                yourMoney.Text = "$" + playerMoney.ToString();
                theirMoney.Text = "$" + merchantMoney.ToString();

                return true;
            };
            Func<bool,bool> onHover = delegate (bool hovered)
            {
                return true;
            };
            var asset = new ButtonAsset(s, onClick, onHover);
            return AddChild(s, asset);
        }

        public override void Draw(Vector2 targetSize)
        {
            DrawColoredRect(new Vector2(0,0),
                            targetSize, 
                            Color.CornflowerBlue);
        }

        public override void Update(Vector2 targetSize, GameTime gameTime)
        {
            Vector2 leftLabelOrigin = new Vector2(360, 400);
            Vector2 leftCountOrigin = new Vector2(430, 400);
            Vector2 lessOrigin = new Vector2(460, 400);
            Vector2 moreOrigin = new Vector2(520, 400);
            Vector2 rightCountOrigin = new Vector2(580, 400);
            Vector2 rightCostOrigin = new Vector2(680, 400);

            yourSide.Position = leftCountOrigin + new Vector2(-40, -80);
            theirSide.Position = rightCountOrigin + new Vector2(-20, -80);
            yourMoney.Position = leftCountOrigin + new Vector2(-40, -50);
            theirMoney.Position = rightCountOrigin + new Vector2(-20, -50);

            for (int i = 0; i < lines.Count; i++)
            {
                LineItem item = lines[i];
                item.Label.Position = leftLabelOrigin + new Vector2(0, i * 30);
                item.Yours.Position = leftCountOrigin + new Vector2(0, i * 30);
                item.Less.Position = lessOrigin + new Vector2(0, i * 30);
                item.More.Position = moreOrigin + new Vector2(0, i * 30);
                item.Theirs.Position = rightCountOrigin + new Vector2(0, i * 30);
                item.Price.Position = rightCostOrigin + new Vector2(0, i * 30);
            }
        }

        public class LineItem
        {
            public TextAsset Label;
            public TextAsset Yours;
            public ButtonAsset Less;
            public ButtonAsset More;
            public TextAsset Theirs;
            public TextAsset Price;
        }
    }

}
